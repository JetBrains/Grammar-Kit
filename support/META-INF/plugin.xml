<idea-plugin url="https://github.com/JetBrains/Grammar-Kit" version="2">
  <id>org.jetbrains.idea.grammar</id>
  <version>1.1.7</version>
  <vendor email="gregory.shrago@jetbrains.com">Greg Shrago</vendor>
  <idea-version since-build="133.696" until-build=""/>

  <name>Grammar-Kit</name>
  <description>BNF Grammars and JFlex lexers editor. Readable parser/PSI code generator.</description>

  <depends optional="true" config-file="plugin-java.xml">com.intellij.modules.java</depends>
  <depends optional="true" config-file="plugin-uml.xml">com.intellij.diagram</depends>

  <change-notes>
    <![CDATA[
    <p>1.1.7/1.1.6</p>
    <ul>
        <li>PSI generator: Improve <b>methods</b> attribute semantics: rename/add new PSI tree accessors</li>
        <li>PSI generator: Drop obsolete <b>methodRenames</b> attribute and add <b>generateTokenAccessors</b></li>
        <li>Live Preview: Auto-generate tokens from usage (no more BAD_TOKEN)</li>
        <li>Editor: Examples added to attributes documentation (Ctrl-Q)</li>
        <li>Editor: Turn grammar spell-check</li>
    </ul>
    <p>1.1.5</p>
    <ul>
        <li>Historical typo fixed: "recoverUntil" attribute renamed to "recoverWhile" (indeed it always meant "while")</li>
        <li>Editor: recoverable rule highlighting, help improved for "pin" and "recoverWhile"</li>
        <li>GPUB: cleanup and OOM protection</li>
        <li>Generator: parser size reduced, fragment parsing fixed, empty tokens support (lexer-based preprocessors)</li>
        <li>Generator: simple #auto recovery predicate generation</li>
    </ul>
    <p>1.1.4</p>
    <ul>
        <li>JFlex language support: highlighting/navigation/completion/rename</li>
        <li>Generator: parser size reduced (most of PsiBuilder-specific logic moved to GPUB)</li>
    </ul>
    <p>1.1.3</p>
    <ul>
        <li>Extensibility: "extends" hooks in GPUB</li>
        <li>Generator: compact token sequence parsing</li>
    </ul>
    <p>1.1.2</p>
    <ul>
        <li>Context menu: Generate JFlex *.flex file</li>
        <li>Context menu: Run JFlex generator</li>
        <li>Context menu: Create custom parser util class</li>
    </ul>
    ]]>
  </change-notes>

  <extensions defaultExtensionNs="com.intellij">
    <errorHandler implementation="com.intellij.diagnostic.ITNReporter"/>

    <fileTypeFactory implementation="org.intellij.grammar.BnfFileTypeFactory"/>
    <lang.parserDefinition language="BNF" implementationClass="org.intellij.grammar.BnfParserDefinition"/>
    <annotator language="BNF" implementationClass="org.intellij.grammar.editor.BnfAnnotator"/>
    <annotator language="BNF" implementationClass="org.intellij.grammar.editor.BnfPinMarkerAnnotator"/>
    <annotator language="BNF" implementationClass="org.intellij.grammar.editor.BnfExpressionMarkerAnnotator"/>
    <lang.syntaxHighlighterFactory key="BNF" implementationClass="org.intellij.grammar.editor.BnfSyntaxHighlighterFactory"/>
    <lang.syntaxHighlighterFactory key="BNF_LP" implementationClass="org.intellij.grammar.livePreview.LivePreviewSyntaxHighlighterFactory"/>
    <elementDescriptionProvider implementation="org.intellij.grammar.BnfDescriptionProvider"/>
    <lang.findUsagesProvider language="BNF" implementationClass="org.intellij.grammar.BnfFindUsagesProvider"/>
    <lang.braceMatcher language="BNF" implementationClass="org.intellij.grammar.BnfBraceMatcher"/>
    <lang.psiStructureViewFactory language="BNF" implementationClass="org.intellij.grammar.BnfStructureViewFactory"/>
    <codeInsight.lineMarkerProvider language="BNF" implementationClass="org.intellij.grammar.editor.BnfRuleLineMarkerProvider"/>
    <codeInsight.lineMarkerProvider language="BNF" implementationClass="org.intellij.grammar.editor.BnfRecursionLineMarkerProvider"/>
    <lang.commenter language="BNF" implementationClass="org.intellij.grammar.BnfCommenter"/>
    <completion.contributor language="BNF" implementationClass="org.intellij.grammar.BnfCompletionContributor" order="before javaClassName"/>
    <lang.elementManipulator forClass="org.intellij.grammar.psi.impl.BnfStringLiteralExpressionImpl"
                             implementationClass="org.intellij.grammar.psi.impl.BnfStringManipulator"/>
    <extendWordSelectionHandler implementation="org.intellij.grammar.editor.BnfWordSelectioner"/>

    <spellchecker.support language="BNF" implementationClass="org.intellij.grammar.editor.BnfSpellCheckingStrategy"/>

    <referencesSearch implementation="org.intellij.grammar.psi.BnfAttrPatternRefSearcher"/>
    <lang.refactoringSupport language="BNF" implementationClass="org.intellij.grammar.refactor.BnfRefactoringSupportProvider"/>
    <inlineActionHandler implementation="org.intellij.grammar.refactor.BnfInlineRuleActionHandler"/>

    <lang.unwrapDescriptor language="BNF" implementationClass="org.intellij.grammar.refactor.BnfUnwrapDescriptor"/>

    <lang.foldingBuilder language="BNF" implementationClass="org.intellij.grammar.BnfFoldingBuilder"/>

    <documentationProvider implementation="org.intellij.grammar.BnfDocumentationProvider"/>

    <lang.formatter language="BNF" implementationClass="org.intellij.grammar.formatter.BnfFormattingModelBuilder"/>
    
    <localInspection language="BNF" shortName="BnfSuspiciousTokenInspection" displayName="Suspicious token" groupName="Grammar Inspections"
                     enabledByDefault="true" level="WARNING" implementationClass="org.intellij.grammar.inspection.BnfSuspiciousTokenInspection"/>
    <localInspection language="BNF" shortName="BnfLeftRecursionInspection" displayName="Left recursion" groupName="Grammar Inspections"
                     enabledByDefault="true" level="WARNING" implementationClass="org.intellij.grammar.inspection.BnfLeftRecursionInspection"/>
    <localInspection language="BNF" shortName="BnfDuplicateRuleInspection" displayName="Duplicate rule" groupName="Grammar Inspections"
                     enabledByDefault="true" level="WARNING" implementationClass="org.intellij.grammar.inspection.BnfDuplicateRuleInspection"/>
    <localInspection language="BNF" shortName="BnfIdenticalChoiceBranchesInspection" displayName="Identical choice branches"
                     groupName="Grammar Inspections" enabledByDefault="true" level="WARNING"
                     implementationClass="org.intellij.grammar.inspection.BnfIdenticalChoiceBranchesInspection"/>
    <localInspection language="BNF" shortName="BnfUnreachableChoiceBranchInspection" displayName="Unreachable choice branch"
                     groupName="Grammar Inspections" enabledByDefault="true" level="WARNING"
                     implementationClass="org.intellij.grammar.inspection.BnfUnreachableChoiceBranchInspection"/>

    <colorSettingsPage implementation="org.intellij.grammar.editor.BnfColorSettingsPage"/>
    <quoteHandler fileType="Grammar" className="org.intellij.grammar.editor.BnfQuoteHandler"/>

    <intentionAction>
      <className>org.intellij.grammar.intention.BnfFlipChoiceIntention</className>
      <category>Grammar</category>
    </intentionAction>

    <!--JFlex Support -->
    <fileTypeFactory implementation="org.intellij.jflex.parser.JFlexFileTypeFactory"/>
    <lang.parserDefinition language="JFlex" implementationClass="org.intellij.jflex.parser.JFlexParserDefinition"/>
    <completion.contributor language="JFlex" implementationClass="org.intellij.jflex.editor.JFlexCompletionContributor" />
    <lang.findUsagesProvider language="JFlex" implementationClass="org.intellij.jflex.editor.JFlexFindUsagesProvider"/>
    <elementDescriptionProvider implementation="org.intellij.jflex.editor.JFlexFindUsagesProvider"/>
    <lang.commenter language="JFlex" implementationClass="org.intellij.jflex.editor.JFlexCommenter"/>
    <lang.refactoringSupport language="JFlex" implementationClass="org.intellij.jflex.editor.JFlexRefactoringSupportProvider"/>
    <annotator language="JFlex" implementationClass="org.intellij.jflex.editor.JFlexAnnotator"/>
    <lang.syntaxHighlighterFactory key="JFlex" implementationClass="org.intellij.jflex.editor.JFlexSyntaxHighlighterFactory"/>
    <colorSettingsPage implementation="org.intellij.jflex.editor.JFlexColorSettingsPage"/>
    <lang.braceMatcher language="JFlex" implementationClass="org.intellij.jflex.editor.JFlexBraceMatcher"/>
    <quoteHandler fileType="JFlex" className="org.intellij.jflex.editor.JFlexQuoteHandler"/>

  </extensions>
  <project-components>
    <component>
      <implementation-class>org.intellij.grammar.BnfUnusedRulePassFactory</implementation-class>
      <skipForDefaultProject/>
    </component>
  </project-components>
  <actions>
    <group id="grammar.file.group" popup="false">
      <action id="grammar.Generate" class="org.intellij.grammar.actions.GenerateAction" text="Generate Parser Code">
        <keyboard-shortcut keymap="$default" first-keystroke="control shift G"/>
      </action>
      <separator/>
      <action id="grammar.LivePreview" class="org.intellij.grammar.actions.LivePreviewAction" text="Live Preview">
        <keyboard-shortcut keymap="$default" first-keystroke="control alt P"/>
      </action>
      <separator/>
      <add-to-group group-id="ToolsMenu" anchor="before" relative-to-action="com.intellij.tools.ExternalToolsGroup"/>
      <add-to-group group-id="EditorPopupMenu" anchor="last"/>
      <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
    </group>
    <action id="grammar.HighlightGrammarAtCaretAction" class="org.intellij.grammar.actions.HighlightGrammarAtCaretAction"
            text="Grammar Highlighting">
      <add-to-group group-id="EditorPopupMenu" anchor="last"/>
      <keyboard-shortcut keymap="$default" first-keystroke="control alt F7"/>
    </action>
    <group id="grammar.RefactoringGroup" popup="false">
      <add-to-group group-id="RefactoringMenu" anchor="first"/>
      <action id="grammars.IntroduceRule" class="org.intellij.grammar.refactor.BnfIntroduceRuleAction" text="Introduce Rule"
              description="Introduce Rule">
        <keyboard-shortcut keymap="$default" first-keystroke="control alt R"/>
      </action>
      <action id="grammars.IntroduceToken" class="org.intellij.grammar.refactor.BnfIntroduceTokenAction" text="Introduce Token"
              description="Introduce Token">
        <keyboard-shortcut keymap="$default" first-keystroke="control alt C"/>
      </action>
    </group>
  </actions>
</idea-plugin>
