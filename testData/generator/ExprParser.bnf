{
  generatePsi=false
  classHeader="//header.txt"
  parserClass="org.intellij.grammar.expression.ExpressionParser"
  extends(".*expr")=expr
  elementTypeFactory="org.intellij.grammar.expression.ExpressionParserDefinition.createType"
  elementTypeHolderClass="org.intellij.grammar.expression.ExpressionTypes"
  stubParserClass="org.intellij.grammar.parser.GeneratedParserUtilBase"
}
root ::= (element ';') *
private element ::= expr  {recoverUntil=element_recover}
private element_recover ::= !';'

// left recursion and empty PSI children define expression root
expr ::= assign_expr
  | conditional_expr
  | add_group
  | mul_group
  | unary_group
  | exp_expr
  | factorial_expr
  | call_expr
  | ref_expr
  | primary_group
private unary_group ::= unary_plus_expr | unary_min_expr
private mul_group ::= mul_expr | div_expr
private add_group ::= plus_expr | minus_expr
private primary_group ::= simple_ref_expr | literal_expr | paren_expr

// expressions: auto-operator detection or parens
simple_ref_expr ::= identifier {elementType=ref_expr}
ref_expr ::= expr '.' simple_ref_expr
call_expr ::= ref_expr arg_list
arg_list ::= '(' [ expr  (',' expr) * ] ')' {pin(".*")=1}
literal_expr ::= number
identifier ::= id
unary_min_expr ::= '-' expr
unary_plus_expr ::= '+' expr
assign_expr ::= expr '=' expr { rightAssociative=true }
div_expr ::= expr '/' expr
mul_expr ::= expr '*' expr
minus_expr ::= expr '-' expr
plus_expr ::= expr '+' expr
exp_expr ::= expr ('^' expr) + // N-ary variant
factorial_expr ::= expr '!'
paren_expr ::= '(' expr ')'
conditional_expr ::= expr '?' expr ':' expr

// test specific expressions
private only_mul_test ::= 'mul only' mul_expr
private only_simple_ref_test ::= 'simple ref only' simple_ref_expr