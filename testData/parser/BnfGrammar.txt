BnfFile:BnfGrammar.bnf
  PsiElement(DUMMY_BLOCK)
    BNF_ATTRS
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:classHeader
        PsiElement(id)('classHeader')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "header.txt"
          PsiElement(string)('"header.txt"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:parserClass
        PsiElement(id)('parserClass')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.parser.GrammarParser"
          PsiElement(string)('"org.intellij.grammar.parser.GrammarParser"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:stubParserClass
        PsiElement(id)('stubParserClass')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.parser.GrammarParserUtil"
          PsiElement(string)('"org.intellij.grammar.parser.GrammarParserUtil"')
      PsiWhiteSpace('\n\n  ')
      BNF_ATTR:implements
        PsiElement(id)('implements')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.psi.BnfCompositeElement"
          PsiElement(string)('"org.intellij.grammar.psi.BnfCompositeElement"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:extends
        PsiElement(id)('extends')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.psi.impl.BnfCompositeElementImpl"
          PsiElement(string)('"org.intellij.grammar.psi.impl.BnfCompositeElementImpl"')
      PsiWhiteSpace('\n\n  ')
      BNF_ATTR:psiClassPrefix
        PsiElement(id)('psiClassPrefix')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "Bnf"
          PsiElement(string)('"Bnf"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:psiImplClassSuffix
        PsiElement(id)('psiImplClassSuffix')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "Impl"
          PsiElement(string)('"Impl"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:psiPackage
        PsiElement(id)('psiPackage')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.psi"
          PsiElement(string)('"org.intellij.grammar.psi"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:psiImplPackage
        PsiElement(id)('psiImplPackage')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.psi.impl"
          PsiElement(string)('"org.intellij.grammar.psi.impl"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:psiImplUtilClass
        PsiElement(id)('psiImplUtilClass')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.psi.impl.GrammarPsiImplUtil"
          PsiElement(string)('"org.intellij.grammar.psi.impl.GrammarPsiImplUtil"')
      PsiWhiteSpace('\n\n  ')
      BNF_ATTR:elementTypeHolderClass
        PsiElement(id)('elementTypeHolderClass')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.psi.BnfTypes"
          PsiElement(string)('"org.intellij.grammar.psi.BnfTypes"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:elementTypePrefix
        PsiElement(id)('elementTypePrefix')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "BNF_"
          PsiElement(string)('"BNF_"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:elementTypeClass
        PsiElement(id)('elementTypeClass')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.psi.BnfCompositeElementType"
          PsiElement(string)('"org.intellij.grammar.psi.BnfCompositeElementType"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:tokenTypeClass
        PsiElement(id)('tokenTypeClass')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.psi.BnfTokenType"
          PsiElement(string)('"org.intellij.grammar.psi.BnfTokenType"')
      PsiWhiteSpace('\n  \n  ')
      BNF_ATTR:tokens
        PsiElement(id)('tokens')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        BNF_VALUE_LIST
          PsiElement([)('[')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('OP_EQ')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "="
              PsiElement(string)('"="')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('OP_IS')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "::="
              PsiElement(string)('"::="')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('OP_OR')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "|"
              PsiElement(string)('"|"')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('OP_OPT')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "?"
              PsiElement(string)('"?"')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('OP_ONEMORE')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "+"
              PsiElement(string)('"+"')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('OP_ZEROMORE')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "*"
              PsiElement(string)('"*"')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('OP_AND')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "&"
              PsiElement(string)('"&"')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('OP_NOT')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "!"
              PsiElement(string)('"!"')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('SEMICOLON')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: ";"
              PsiElement(string)('";"')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('LEFT_BRACE')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "{"
              PsiElement(string)('"{"')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('RIGHT_BRACE')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "}"
              PsiElement(string)('"}"')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('LEFT_BRACKET')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "["
              PsiElement(string)('"["')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('RIGHT_BRACKET')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "]"
              PsiElement(string)('"]"')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('LEFT_PAREN')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "("
              PsiElement(string)('"("')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('RIGHT_PAREN')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: ")"
              PsiElement(string)('")"')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('EXTERNAL_START')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: "<<"
              PsiElement(string)('"<<"')
          PsiWhiteSpace('\n    ')
          BNF_LIST_ENTRY
            PsiElement(id)('EXTERNAL_END')
            PsiElement(=)('=')
            BNF_STRING_LITERAL_EXPRESSION: ">>"
              PsiElement(string)('">>"')
          PsiWhiteSpace('\n  ')
          PsiElement(])(']')
      PsiWhiteSpace('\n\n  ')
      BNF_ATTR:implements
        PsiElement(id)('implements')
        BNF_ATTR_PATTERN
          PsiElement(()('(')
          BNF_STRING_LITERAL_EXPRESSION: "rule|attr"
            PsiElement(string)('"rule|attr"')
          PsiElement())(')')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.psi.BnfNamedElement"
          PsiElement(string)('"org.intellij.grammar.psi.BnfNamedElement"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:extends
        PsiElement(id)('extends')
        BNF_ATTR_PATTERN
          PsiElement(()('(')
          BNF_STRING_LITERAL_EXPRESSION: "rule|attr"
            PsiElement(string)('"rule|attr"')
          PsiElement())(')')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.psi.impl.BnfNamedElementImpl"
          PsiElement(string)('"org.intellij.grammar.psi.impl.BnfNamedElementImpl"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:mixin
        PsiElement(id)('mixin')
        BNF_ATTR_PATTERN
          PsiElement(()('(')
          BNF_STRING_LITERAL_EXPRESSION: "reference_or_token"
            PsiElement(string)('"reference_or_token"')
          PsiElement())(')')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.psi.impl.BnfRefOrTokenImpl"
          PsiElement(string)('"org.intellij.grammar.psi.impl.BnfRefOrTokenImpl"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:mixin
        PsiElement(id)('mixin')
        BNF_ATTR_PATTERN
          PsiElement(()('(')
          BNF_STRING_LITERAL_EXPRESSION: "string_literal_expression"
            PsiElement(string)('"string_literal_expression"')
          PsiElement())(')')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "org.intellij.grammar.psi.impl.BnfStringImpl"
          PsiElement(string)('"org.intellij.grammar.psi.impl.BnfStringImpl"')
      PsiWhiteSpace('\n  ')
      BNF_ATTR:extends
        PsiElement(id)('extends')
        BNF_ATTR_PATTERN
          PsiElement(()('(')
          BNF_STRING_LITERAL_EXPRESSION: "paren_.*expression"
            PsiElement(string)('"paren_.*expression"')
          PsiElement())(')')
        PsiElement(=)('=')
        BNF_REFERENCE_OR_TOKEN: parenthesized
          PsiElement(id)('parenthesized')
      PsiWhiteSpace('\n\n  ')
      BNF_ATTR:methodRenames
        PsiElement(id)('methodRenames')
        BNF_ATTR_PATTERN
          PsiElement(()('(')
          BNF_STRING_LITERAL_EXPRESSION: "getStringLiteralExpression"
            PsiElement(string)('"getStringLiteralExpression"')
          PsiElement())(')')
        PsiElement(=)('=')
        BNF_STRING_LITERAL_EXPRESSION: "getLiteralExpression"
          PsiElement(string)('"getLiteralExpression"')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    BNF_RULE:grammar
      BNF_MODIFIER
        PsiElement(id)('external')
      PsiWhiteSpace(' ')
      PsiElement(id)('grammar')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_REFERENCE_OR_TOKEN: parseGrammar
          PsiElement(id)('parseGrammar')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: grammar_element
          PsiElement(id)('grammar_element')
    PsiWhiteSpace('\n')
    BNF_RULE:grammar_element
      BNF_MODIFIER
        PsiElement(id)('private')
      PsiWhiteSpace(' ')
      PsiElement(id)('grammar_element')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_CHOICE
        BNF_REFERENCE_OR_TOKEN: attrs
          PsiElement(id)('attrs')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: rule
          PsiElement(id)('rule')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:recoverUntil
          PsiElement(id)('recoverUntil')
          PsiElement(=)('=')
          BNF_REFERENCE_OR_TOKEN: grammar_element_recover
            PsiElement(id)('grammar_element_recover')
        PsiElement(})('}')
    PsiWhiteSpace('\n')
    BNF_RULE:grammar_element_recover
      BNF_MODIFIER
        PsiElement(id)('private')
      PsiWhiteSpace(' ')
      PsiElement(id)('grammar_element_recover')
      PsiElement(::=)('::=')
      BNF_PREDICATE
        BNF_PREDICATE_SIGN
          PsiElement(!)('!')
        BNF_PAREN_EXPRESSION
          PsiElement(()('(')
          BNF_CHOICE
            BNF_STRING_LITERAL_EXPRESSION: '{'
              PsiElement(string)(''{'')
            PsiElement(|)('|')
            BNF_REFERENCE_OR_TOKEN: rule_start
              PsiElement(id)('rule_start')
          PsiElement())(')')
    PsiWhiteSpace('\n\n')
    BNF_RULE:rule
      PsiElement(id)('rule')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_REFERENCE_OR_TOKEN: rule_start
          PsiElement(id)('rule_start')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: expression
          PsiElement(id)('expression')
        PsiWhiteSpace(' ')
        BNF_QUANTIFIED
          BNF_REFERENCE_OR_TOKEN: attrs
            PsiElement(id)('attrs')
          BNF_QUANTIFIER
            PsiElement(?)('?')
        PsiWhiteSpace(' ')
        BNF_QUANTIFIED
          BNF_STRING_LITERAL_EXPRESSION: ';'
            PsiElement(string)('';'')
          BNF_QUANTIFIER
            PsiElement(?)('?')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:pin
          PsiElement(id)('pin')
          PsiElement(=)('=')
          BNF_LITERAL_EXPRESSION
            PsiElement(number)('2')
        PsiElement(})('}')
    PsiWhiteSpace('\n')
    BNF_RULE:rule_start
      BNF_MODIFIER
        PsiElement(id)('private')
      PsiWhiteSpace(' ')
      PsiElement(id)('rule_start')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_QUANTIFIED
          BNF_REFERENCE_OR_TOKEN: modifier
            PsiElement(id)('modifier')
          BNF_QUANTIFIER
            PsiElement(*)('*')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: id
          PsiElement(id)('id')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: '::='
          PsiElement(string)(''::='')
    PsiWhiteSpace('\n')
    BNF_RULE:modifier
      PsiElement(id)('modifier')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_CHOICE
        BNF_STRING_LITERAL_EXPRESSION: 'private'
          PsiElement(string)(''private'')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: 'external'
          PsiElement(string)(''external'')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: 'meta'
          PsiElement(string)(''meta'')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: 'inner'
          PsiElement(string)(''inner'')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: 'left'
          PsiElement(string)(''left'')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: 'fake'
          PsiElement(string)(''fake'')
    PsiWhiteSpace('\n\n')
    BNF_RULE:attrs
      PsiElement(id)('attrs')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_STRING_LITERAL_EXPRESSION: '{'
          PsiElement(string)(''{'')
        PsiWhiteSpace(' ')
        BNF_QUANTIFIED
          BNF_REFERENCE_OR_TOKEN: attr
            PsiElement(id)('attr')
          PsiWhiteSpace(' ')
          BNF_QUANTIFIER
            PsiElement(*)('*')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: '}'
          PsiElement(string)(''}'')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:pin
          PsiElement(id)('pin')
          PsiElement(=)('=')
          BNF_LITERAL_EXPRESSION
            PsiElement(number)('1')
        PsiElement(})('}')
    PsiWhiteSpace('\n')
    BNF_RULE:attr
      PsiElement(id)('attr')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_REFERENCE_OR_TOKEN: attr_start
          PsiElement(id)('attr_start')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: attr_value
          PsiElement(id)('attr_value')
        PsiWhiteSpace(' ')
        BNF_QUANTIFIED
          BNF_STRING_LITERAL_EXPRESSION: ';'
            PsiElement(string)('';'')
          BNF_QUANTIFIER
            PsiElement(?)('?')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:pin
          PsiElement(id)('pin')
          PsiElement(=)('=')
          BNF_LITERAL_EXPRESSION
            PsiElement(number)('1')
        PsiWhiteSpace(' ')
        BNF_ATTR:recoverUntil
          PsiElement(id)('recoverUntil')
          PsiElement(=)('=')
          BNF_REFERENCE_OR_TOKEN: attr_recover_until
            PsiElement(id)('attr_recover_until')
        PsiElement(})('}')
    PsiWhiteSpace('\n')
    BNF_RULE:attr_start
      BNF_MODIFIER
        PsiElement(id)('private')
      PsiWhiteSpace(' ')
      PsiElement(id)('attr_start')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_REFERENCE_OR_TOKEN: id
          PsiElement(id)('id')
        PsiWhiteSpace(' ')
        BNF_PAREN_EXPRESSION
          PsiElement(()('(')
          BNF_CHOICE
            BNF_SEQUENCE
              BNF_REFERENCE_OR_TOKEN: attr_pattern
                PsiElement(id)('attr_pattern')
              PsiWhiteSpace(' ')
              BNF_STRING_LITERAL_EXPRESSION: '='
                PsiElement(string)(''='')
            PsiWhiteSpace(' ')
            PsiElement(|)('|')
            PsiWhiteSpace(' ')
            BNF_STRING_LITERAL_EXPRESSION: '='
              PsiElement(string)(''='')
          PsiElement())(')')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:pin
          PsiElement(id)('pin')
          BNF_ATTR_PATTERN
            PsiElement(()('(')
            BNF_STRING_LITERAL_EXPRESSION: ".*"
              PsiElement(string)('".*"')
            PsiElement())(')')
          PsiElement(=)('=')
          BNF_STRING_LITERAL_EXPRESSION: "attr_pattern"
            PsiElement(string)('"attr_pattern"')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  PsiElement(DUMMY_BLOCK)
    BNF_RULE:attr_start_simple
      BNF_MODIFIER
        PsiElement(id)('private')
      PsiWhiteSpace(' ')
      PsiElement(id)('attr_start_simple')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_REFERENCE_OR_TOKEN: id
          PsiElement(id)('id')
        PsiWhiteSpace(' ')
        BNF_QUANTIFIED
          BNF_REFERENCE_OR_TOKEN: attr_pattern
            PsiElement(id)('attr_pattern')
          BNF_QUANTIFIER
            PsiElement(?)('?')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: '='
          PsiElement(string)(''='')
    PsiWhiteSpace('\n')
    BNF_RULE:attr_recover_until
      BNF_MODIFIER
        PsiElement(id)('private')
      PsiWhiteSpace(' ')
      PsiElement(id)('attr_recover_until')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_PREDICATE
        BNF_PREDICATE_SIGN
          PsiElement(!)('!')
        BNF_PAREN_EXPRESSION
          PsiElement(()('(')
          BNF_CHOICE
            BNF_STRING_LITERAL_EXPRESSION: '}'
              PsiElement(string)(''}'')
            PsiWhiteSpace(' ')
            PsiElement(|)('|')
            PsiWhiteSpace(' ')
            BNF_REFERENCE_OR_TOKEN: attr_start
              PsiElement(id)('attr_start')
          PsiElement())(')')
    PsiWhiteSpace('\n')
    BNF_RULE:attr_value
      BNF_MODIFIER
        PsiElement(id)('private')
      PsiWhiteSpace(' ')
      PsiElement(id)('attr_value')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_PAREN_EXPRESSION
          PsiElement(()('(')
          BNF_CHOICE
            BNF_REFERENCE_OR_TOKEN: reference_or_token
              PsiElement(id)('reference_or_token')
            PsiWhiteSpace(' ')
            PsiElement(|)('|')
            PsiWhiteSpace(' ')
            BNF_REFERENCE_OR_TOKEN: literal_expression
              PsiElement(id)('literal_expression')
            PsiWhiteSpace(' ')
            PsiElement(|)('|')
            PsiWhiteSpace(' ')
            BNF_REFERENCE_OR_TOKEN: value_list
              PsiElement(id)('value_list')
          PsiElement())(')')
        PsiWhiteSpace(' ')
        BNF_PREDICATE
          BNF_PREDICATE_SIGN
            PsiElement(!)('!')
          BNF_STRING_LITERAL_EXPRESSION: '='
            PsiElement(string)(''='')
    PsiWhiteSpace('\n')
    BNF_RULE:attr_pattern
      PsiElement(id)('attr_pattern')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_STRING_LITERAL_EXPRESSION: '('
          PsiElement(string)(''('')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: string_literal_expression
          PsiElement(id)('string_literal_expression')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: ')'
          PsiElement(string)('')'')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:pin
          PsiElement(id)('pin')
          PsiElement(=)('=')
          BNF_LITERAL_EXPRESSION
            PsiElement(number)('1')
        PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    BNF_RULE:value_list
      PsiElement(id)('value_list')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_STRING_LITERAL_EXPRESSION: '['
          PsiElement(string)(''['')
        PsiWhiteSpace(' ')
        BNF_QUANTIFIED
          BNF_REFERENCE_OR_TOKEN: list_entry
            PsiElement(id)('list_entry')
          PsiWhiteSpace(' ')
          BNF_QUANTIFIER
            PsiElement(*)('*')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: ']'
          PsiElement(string)('']'')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:pin
          PsiElement(id)('pin')
          PsiElement(=)('=')
          BNF_LITERAL_EXPRESSION
            PsiElement(number)('1')
        PsiWhiteSpace(' ')
        BNF_ATTR:extends
          PsiElement(id)('extends')
          PsiElement(=)('=')
          BNF_REFERENCE_OR_TOKEN: expression
            PsiElement(id)('expression')
        PsiElement(})('}')
    PsiWhiteSpace('\n')
    BNF_RULE:list_entry
      PsiElement(id)('list_entry')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_PAREN_EXPRESSION
          PsiElement(()('(')
          BNF_CHOICE
            BNF_SEQUENCE
              BNF_REFERENCE_OR_TOKEN: id
                PsiElement(id)('id')
              PsiWhiteSpace(' ')
              BNF_QUANTIFIED
                BNF_REFERENCE_OR_TOKEN: list_entry_tail
                  PsiElement(id)('list_entry_tail')
                BNF_QUANTIFIER
                  PsiElement(?)('?')
            PsiWhiteSpace(' ')
            PsiElement(|)('|')
            PsiWhiteSpace(' ')
            BNF_REFERENCE_OR_TOKEN: string_literal_expression
              PsiElement(id)('string_literal_expression')
          PsiElement())(')')
        PsiWhiteSpace(' ')
        BNF_QUANTIFIED
          BNF_STRING_LITERAL_EXPRESSION: ';'
            PsiElement(string)('';'')
          BNF_QUANTIFIER
            PsiElement(?)('?')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        BNF_ATTR:recoverUntil
          PsiElement(id)('recoverUntil')
          PsiElement(=)('=')
          BNF_REFERENCE_OR_TOKEN: list_entry_recover_until
            PsiElement(id)('list_entry_recover_until')
        PsiWhiteSpace('\n  ')
        BNF_ATTR:methods
          PsiElement(id)('methods')
          PsiElement(=)('=')
          BNF_VALUE_LIST
            PsiElement([)('[')
            BNF_LIST_ENTRY
              PsiElement(id)('getReferences')
            PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
    PsiWhiteSpace('\n')
    BNF_RULE:list_entry_tail
      BNF_MODIFIER
        PsiElement(id)('private')
      PsiWhiteSpace(' ')
      PsiElement(id)('list_entry_tail')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_STRING_LITERAL_EXPRESSION: '='
          PsiElement(string)(''='')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: string_literal_expression
          PsiElement(id)('string_literal_expression')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:pin
          PsiElement(id)('pin')
          PsiElement(=)('=')
          BNF_LITERAL_EXPRESSION
            PsiElement(number)('1')
        PsiElement(})('}')
    PsiWhiteSpace('\n')
    BNF_RULE:list_entry_recover_until
      BNF_MODIFIER
        PsiElement(id)('private')
      PsiWhiteSpace(' ')
      PsiElement(id)('list_entry_recover_until')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_PREDICATE
        BNF_PREDICATE_SIGN
          PsiElement(!)('!')
        BNF_PAREN_EXPRESSION
          PsiElement(()('(')
          BNF_CHOICE
            BNF_STRING_LITERAL_EXPRESSION: ']'
              PsiElement(string)('']'')
            PsiWhiteSpace(' ')
            PsiElement(|)('|')
            PsiWhiteSpace(' ')
            BNF_STRING_LITERAL_EXPRESSION: '}'
              PsiElement(string)(''}'')
            PsiWhiteSpace(' ')
            PsiElement(|)('|')
            PsiWhiteSpace(' ')
            BNF_REFERENCE_OR_TOKEN: id
              PsiElement(id)('id')
            PsiWhiteSpace(' ')
            PsiElement(|)('|')
            PsiWhiteSpace(' ')
            BNF_REFERENCE_OR_TOKEN: string
              PsiElement(id)('string')
          PsiElement())(')')
    PsiWhiteSpace('\n\n')
    BNF_RULE:expression
      PsiElement(id)('expression')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_REFERENCE_OR_TOKEN: sequence
          PsiElement(id)('sequence')
        PsiWhiteSpace(' ')
        BNF_QUANTIFIED
          BNF_REFERENCE_OR_TOKEN: choice
            PsiElement(id)('choice')
          BNF_QUANTIFIER
            PsiElement(?)('?')
    PsiWhiteSpace('\n')
    BNF_RULE:sequence
      PsiElement(id)('sequence')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_QUANTIFIED
        BNF_REFERENCE_OR_TOKEN: option
          PsiElement(id)('option')
        PsiWhiteSpace(' ')
        BNF_QUANTIFIER
          PsiElement(*)('*')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:extends
          PsiElement(id)('extends')
          PsiElement(=)('=')
          BNF_REFERENCE_OR_TOKEN: expression
            PsiElement(id)('expression')
        PsiWhiteSpace(' ')
        BNF_ATTR:recoverUntil
          PsiElement(id)('recoverUntil')
          PsiElement(=)('=')
          BNF_REFERENCE_OR_TOKEN: sequence_recover
            PsiElement(id)('sequence_recover')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  PsiElement(DUMMY_BLOCK)
    BNF_RULE:sequence_recover
      BNF_MODIFIER
        PsiElement(id)('private')
      PsiWhiteSpace(' ')
      PsiElement(id)('sequence_recover')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_PREDICATE
          BNF_PREDICATE_SIGN
            PsiElement(!)('!')
          BNF_PAREN_EXPRESSION
            PsiElement(()('(')
            BNF_CHOICE
              BNF_STRING_LITERAL_EXPRESSION: ';'
                PsiElement(string)('';'')
              PsiElement(|)('|')
              BNF_STRING_LITERAL_EXPRESSION: '|'
                PsiElement(string)(''|'')
              PsiElement(|)('|')
              BNF_STRING_LITERAL_EXPRESSION: '('
                PsiElement(string)(''('')
              PsiElement(|)('|')
              BNF_STRING_LITERAL_EXPRESSION: ')'
                PsiElement(string)('')'')
              PsiElement(|)('|')
              BNF_STRING_LITERAL_EXPRESSION: '['
                PsiElement(string)(''['')
              PsiElement(|)('|')
              BNF_STRING_LITERAL_EXPRESSION: ']'
                PsiElement(string)('']'')
              PsiElement(|)('|')
              BNF_STRING_LITERAL_EXPRESSION: '{'
                PsiElement(string)(''{'')
              PsiElement(|)('|')
              BNF_STRING_LITERAL_EXPRESSION: '}'
                PsiElement(string)(''}'')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: grammar_element_recover
          PsiElement(id)('grammar_element_recover')
    PsiWhiteSpace('\n')
    BNF_RULE:option
      BNF_MODIFIER
        PsiElement(id)('private')
      PsiWhiteSpace(' ')
      PsiElement(id)('option')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_CHOICE
        BNF_REFERENCE_OR_TOKEN: predicate
          PsiElement(id)('predicate')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: paren_opt_expression
          PsiElement(id)('paren_opt_expression')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_SEQUENCE
          BNF_REFERENCE_OR_TOKEN: simple
            PsiElement(id)('simple')
          PsiWhiteSpace(' ')
          BNF_QUANTIFIED
            BNF_REFERENCE_OR_TOKEN: quantified
              PsiElement(id)('quantified')
            BNF_QUANTIFIER
              PsiElement(?)('?')
    PsiWhiteSpace('\n\n')
    BNF_RULE:choice
      BNF_MODIFIER
        PsiElement(id)('left')
      PsiWhiteSpace(' ')
      PsiElement(id)('choice')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_QUANTIFIED
        BNF_PAREN_EXPRESSION
          PsiElement(()('(')
          PsiWhiteSpace(' ')
          BNF_SEQUENCE
            BNF_STRING_LITERAL_EXPRESSION: '|'
              PsiElement(string)(''|'')
            PsiWhiteSpace(' ')
            BNF_REFERENCE_OR_TOKEN: sequence
              PsiElement(id)('sequence')
          PsiWhiteSpace(' ')
          PsiElement())(')')
        PsiWhiteSpace(' ')
        BNF_QUANTIFIER
          PsiElement(+)('+')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:pin
          PsiElement(id)('pin')
          BNF_ATTR_PATTERN
            PsiElement(()('(')
            BNF_STRING_LITERAL_EXPRESSION: ".*"
              PsiElement(string)('".*"')
            PsiElement())(')')
          PsiElement(=)('=')
          BNF_LITERAL_EXPRESSION
            PsiElement(number)('1')
        PsiWhiteSpace(' ')
        BNF_ATTR:extends
          PsiElement(id)('extends')
          PsiElement(=)('=')
          BNF_REFERENCE_OR_TOKEN: expression
            PsiElement(id)('expression')
        PsiElement(})('}')
    PsiWhiteSpace('\n')
    BNF_RULE:quantified
      BNF_MODIFIER
        PsiElement(id)('left')
      PsiWhiteSpace(' ')
      PsiElement(id)('quantified')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_REFERENCE_OR_TOKEN: quantifier
        PsiElement(id)('quantifier')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:extends
          PsiElement(id)('extends')
          PsiElement(=)('=')
          BNF_REFERENCE_OR_TOKEN: expression
            PsiElement(id)('expression')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
    PsiWhiteSpace('\n')
    BNF_RULE:quantifier
      PsiElement(id)('quantifier')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_CHOICE
        BNF_STRING_LITERAL_EXPRESSION: '?'
          PsiElement(string)(''?'')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: '+'
          PsiElement(string)(''+'')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: '*'
          PsiElement(string)(''*'')
    PsiWhiteSpace('\n\n')
    BNF_RULE:predicate
      PsiElement(id)('predicate')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_REFERENCE_OR_TOKEN: predicate_sign
          PsiElement(id)('predicate_sign')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: simple
          PsiElement(id)('simple')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:extends
          PsiElement(id)('extends')
          PsiElement(=)('=')
          BNF_REFERENCE_OR_TOKEN: expression
            PsiElement(id)('expression')
        PsiElement(})('}')
    PsiWhiteSpace('\n')
    BNF_RULE:predicate_sign
      PsiElement(id)('predicate_sign')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_CHOICE
        BNF_STRING_LITERAL_EXPRESSION: '&'
          PsiElement(string)(''&'')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: '!'
          PsiElement(string)(''!'')
    PsiWhiteSpace('\n\n')
    BNF_RULE:parenthesized
      BNF_MODIFIER
        PsiElement(id)('fake')
      PsiWhiteSpace(' ')
      PsiElement(id)('parenthesized')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_REFERENCE_OR_TOKEN: simple_paren_expression
        PsiElement(id)('simple_paren_expression')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:extends
          PsiElement(id)('extends')
          PsiElement(=)('=')
          BNF_REFERENCE_OR_TOKEN: expression
            PsiElement(id)('expression')
        PsiElement(})('}')
    PsiWhiteSpace('\n')
    BNF_RULE:simple
      BNF_MODIFIER
        PsiElement(id)('private')
      PsiWhiteSpace(' ')
      PsiElement(id)('simple')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_CHOICE
        BNF_SEQUENCE
          BNF_PREDICATE
            BNF_PREDICATE_SIGN
              PsiElement(!)('!')
            BNF_PAREN_EXPRESSION
              PsiElement(()('(')
              BNF_SEQUENCE
                BNF_QUANTIFIED
                  BNF_REFERENCE_OR_TOKEN: modifier
                    PsiElement(id)('modifier')
                  BNF_QUANTIFIER
                    PsiElement(*)('*')
                PsiWhiteSpace(' ')
                BNF_REFERENCE_OR_TOKEN: id
                  PsiElement(id)('id')
                PsiWhiteSpace(' ')
                BNF_STRING_LITERAL_EXPRESSION: '::='
                  PsiElement(string)(''::='')
              PsiWhiteSpace(' ')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          BNF_REFERENCE_OR_TOKEN: reference_or_token
            PsiElement(id)('reference_or_token')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: literal_expression
          PsiElement(id)('literal_expression')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: external_expression
          PsiElement(id)('external_expression')
        PsiWhiteSpace(' ')
        PsiElement(|)('|')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: paren_expression
          PsiElement(id)('paren_expression')
    PsiWhiteSpace('\n')
    BNF_RULE:external_expression
      PsiElement(id)('external_expression')
      PsiWhiteSpace(' ')
      PsiElement(::=)('::=')
      PsiWhiteSpace(' ')
      BNF_SEQUENCE
        BNF_STRING_LITERAL_EXPRESSION: '<<'
          PsiElement(string)(''<<'')
        PsiWhiteSpace(' ')
        BNF_REFERENCE_OR_TOKEN: reference_or_token
          PsiElement(id)('reference_or_token')
        PsiWhiteSpace(' ')
        BNF_QUANTIFIED
          BNF_REFERENCE_OR_TOKEN: option
            PsiElement(id)('option')
          PsiWhiteSpace(' ')
          BNF_QUANTIFIER
            PsiElement(*)('*')
        PsiWhiteSpace(' ')
        BNF_STRING_LITERAL_EXPRESSION: '>>'
          PsiElement(string)(''>>'')
      PsiWhiteSpace(' ')
      BNF_ATTRS
        PsiElement({)('{')
        BNF_ATTR:pin
          PsiElement(id)('pin')
          PsiElement(=)('=')
          BNF_LITERAL_EXPRESSION
            PsiElement(number)('2')
        PsiWhiteSpace(' ')
        BNF_ATTR:extends
          PsiElement(id)('extends')
          PsiElement(=)('=')
          BNF_REFERENCE_OR_TOKEN: expression
            PsiElement(id)('expression')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  BNF_RULE:reference_or_token
    PsiElement(id)('reference_or_token')
    PsiWhiteSpace(' ')
    PsiElement(::=)('::=')
    PsiWhiteSpace(' ')
    BNF_REFERENCE_OR_TOKEN: id
      PsiElement(id)('id')
    PsiWhiteSpace('  ')
    BNF_ATTRS
      PsiElement({)('{')
      BNF_ATTR:extends
        PsiElement(id)('extends')
        PsiElement(=)('=')
        BNF_REFERENCE_OR_TOKEN: expression
          PsiElement(id)('expression')
      PsiWhiteSpace(' ')
      PsiElement(})('}')
  PsiWhiteSpace('\n')
  BNF_RULE:literal_expression
    PsiElement(id)('literal_expression')
    PsiWhiteSpace(' ')
    PsiElement(::=)('::=')
    PsiWhiteSpace(' ')
    BNF_CHOICE
      BNF_REFERENCE_OR_TOKEN: string_literal_expression
        PsiElement(id)('string_literal_expression')
      PsiWhiteSpace(' ')
      PsiElement(|)('|')
      PsiWhiteSpace(' ')
      BNF_REFERENCE_OR_TOKEN: number
        PsiElement(id)('number')
    PsiWhiteSpace(' ')
    BNF_ATTRS
      PsiElement({)('{')
      BNF_ATTR:extends
        PsiElement(id)('extends')
        PsiElement(=)('=')
        BNF_REFERENCE_OR_TOKEN: expression
          PsiElement(id)('expression')
      PsiWhiteSpace(' ')
      PsiElement(})('}')
  PsiWhiteSpace('\n')
  BNF_RULE:string_literal_expression
    PsiElement(id)('string_literal_expression')
    PsiWhiteSpace(' ')
    PsiElement(::=)('::=')
    PsiWhiteSpace(' ')
    BNF_REFERENCE_OR_TOKEN: string
      PsiElement(id)('string')
    PsiWhiteSpace(' ')
    BNF_ATTRS
      PsiElement({)('{')
      BNF_ATTR:extends
        PsiElement(id)('extends')
        PsiElement(=)('=')
        BNF_REFERENCE_OR_TOKEN: literal_expression
          PsiElement(id)('literal_expression')
      PsiElement(})('}')
  PsiWhiteSpace('\n')
  BNF_RULE:paren_expression
    PsiElement(id)('paren_expression')
    PsiWhiteSpace(' ')
    PsiElement(::=)('::=')
    PsiWhiteSpace(' ')
    BNF_CHOICE
      BNF_REFERENCE_OR_TOKEN: simple_paren_expression
        PsiElement(id)('simple_paren_expression')
      PsiWhiteSpace(' ')
      PsiElement(|)('|')
      PsiWhiteSpace(' ')
      BNF_REFERENCE_OR_TOKEN: alt_choice_expression
        PsiElement(id)('alt_choice_expression')
  PsiWhiteSpace('\n')
  BNF_RULE:paren_opt_expression
    PsiElement(id)('paren_opt_expression')
    PsiWhiteSpace(' ')
    PsiElement(::=)('::=')
    PsiWhiteSpace(' ')
    BNF_SEQUENCE
      BNF_STRING_LITERAL_EXPRESSION: '['
        PsiElement(string)(''['')
      PsiWhiteSpace(' ')
      BNF_REFERENCE_OR_TOKEN: expression
        PsiElement(id)('expression')
      PsiWhiteSpace(' ')
      BNF_STRING_LITERAL_EXPRESSION: ']'
        PsiElement(string)('']'')
    PsiWhiteSpace(' ')
    BNF_ATTRS
      PsiElement({)('{')
      BNF_ATTR:pin
        PsiElement(id)('pin')
        PsiElement(=)('=')
        BNF_LITERAL_EXPRESSION
          PsiElement(number)('1')
      PsiElement(})('}')
  PsiWhiteSpace('\n')
  BNF_RULE:simple_paren_expression
    BNF_MODIFIER
      PsiElement(id)('private')
    PsiWhiteSpace(' ')
    PsiElement(id)('simple_paren_expression')
    PsiWhiteSpace(' ')
    PsiElement(::=)('::=')
    PsiWhiteSpace(' ')
    BNF_SEQUENCE
      BNF_STRING_LITERAL_EXPRESSION: '('
        PsiElement(string)(''('')
      PsiWhiteSpace(' ')
      BNF_REFERENCE_OR_TOKEN: expression
        PsiElement(id)('expression')
      PsiWhiteSpace(' ')
      BNF_STRING_LITERAL_EXPRESSION: ')'
        PsiElement(string)('')'')
    PsiWhiteSpace(' ')
    BNF_ATTRS
      PsiElement({)('{')
      BNF_ATTR:pin
        PsiElement(id)('pin')
        PsiElement(=)('=')
        BNF_LITERAL_EXPRESSION
          PsiElement(number)('1')
      PsiElement(})('}')
  PsiWhiteSpace('\n')
  BNF_RULE:alt_choice_expression
    BNF_MODIFIER
      PsiElement(id)('private')
    PsiWhiteSpace(' ')
    PsiElement(id)('alt_choice_expression')
    PsiWhiteSpace(' ')
    PsiElement(::=)('::=')
    PsiWhiteSpace(' ')
    BNF_SEQUENCE
      BNF_STRING_LITERAL_EXPRESSION: '{'
        PsiElement(string)(''{'')
      PsiWhiteSpace(' ')
      BNF_PREDICATE
        BNF_PREDICATE_SIGN
          PsiElement(!)('!')
        BNF_REFERENCE_OR_TOKEN: attr_start_simple
          PsiElement(id)('attr_start_simple')
      PsiWhiteSpace(' ')
      BNF_REFERENCE_OR_TOKEN: expression
        PsiElement(id)('expression')
      PsiWhiteSpace(' ')
      BNF_STRING_LITERAL_EXPRESSION: '}'
        PsiElement(string)(''}'')
    PsiWhiteSpace(' ')
    BNF_ATTRS
      PsiElement({)('{')
      BNF_ATTR:pin
        PsiElement(id)('pin')
        PsiElement(=)('=')
        BNF_LITERAL_EXPRESSION
          PsiElement(number)('2')
      PsiElement(})('}')