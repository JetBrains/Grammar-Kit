{
  generate=[psi-factory="no"]
  parserClass="Fixes"
  extends(".*expr")="expr"

  tokens=[
    token-one
    token-two
    token-three='#'
  ]
}

root ::=

some ::= A
zome ::= token-one | token-two
with_recursive ::= recursive
private recursive ::= some [recursive]

private meta sequence ::= <<p>> (',' <<p>>)*  {pin(".*")=1}
some_seq ::= <<sequence some>>

expr ::= a_expr | b_expr
a_expr ::= orRestriction
b_expr ::= andRestriction
private orRestriction ::= andRestriction ( "||" andRestriction ) *
private andRestriction ::= singleRestriction ( "&&" singleRestriction ) *
private singleRestriction ::= A expr | '(' orRestriction ')'

some_expr ::= expr left_expr *
left left_expr ::= expr

private two_usages ::= expr two_usages_left | expr two_usages_left
left two_usages_left ::=

private erl_tail_bad ::= (A erl_tail_bad)*
erl_list ::= expr A erl_tail {pin=2}
private erl_tail ::= zome | A zome | '&&' expr some erl_tail {pin(".*")=1}

private pinned_report ::= A | &B A {pin(".*")=1}
private pinned_report_ext ::= A | &<<aux>> A {pin(".*")=1}

private Foo ::= &<Foo  predicate> <Foo (ﾉ´･ω･)ﾉ ﾐ ┸━┸ inner> {
  recoverWhile="Foo  recovery"
}
private <Foo  predicate> ::=
private <Foo  recovery> ::=
<Foo (ﾉ´･ω･)ﾉ ﾐ ┸━┸ inner> ::=

fake thing ::= thing_skip
fake thing_item ::= "foo"
fake thing_skip ::= "bar" {elementType=thing_item}

import ::= A (some A | A some A) {pin("import")=1}

private meta meta2 ::= <<p>> <<q>>
private nested_meta_pin ::= "1" (("2") <<meta2 <<meta2 ("3" "a") !"b">> <<meta2 ("4" "a") ("5" "a")>>>>) {pin(".*")=1}

not_optimized_choice ::= A | private_named | private_unnamed
private optimized_choice ::= A | private_named | private_unnamed
private private_named ::= "foo" {name="named"}
private private_unnamed ::= "foo"

private optimized_choice2 ::= token-two | '#'
private optimized_choice3 ::= "foo" | "bar"

recursive_extendA ::= { extends=recursive_extendB }
recursive_extendB ::= { extends=recursive_extendA }